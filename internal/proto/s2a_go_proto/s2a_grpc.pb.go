// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: internal/proto/s2a/s2a.proto

package s2a_go_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	S2AService_SetUpSession_FullMethodName = "/s2a.proto.S2AService/SetUpSession"
)

// S2AServiceClient is the client API for S2AService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type S2AServiceClient interface {
	// S2A service accepts a stream of session setup requests and returns a stream
	// of session setup responses. The client of this service is expected to send
	// exactly one client_start or server_start message followed by at least one
	// next message. Applications running TLS clients can send requests with
	// resumption_ticket messages only after the session is successfully set up.
	//
	// Every time S2A client sends a request, this service sends a response.
	// However, clients do not have to wait for service response before sending
	// the next request.
	SetUpSession(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SessionReq, SessionResp], error)
}

type s2AServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewS2AServiceClient(cc grpc.ClientConnInterface) S2AServiceClient {
	return &s2AServiceClient{cc}
}

func (c *s2AServiceClient) SetUpSession(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SessionReq, SessionResp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &S2AService_ServiceDesc.Streams[0], S2AService_SetUpSession_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SessionReq, SessionResp]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type S2AService_SetUpSessionClient = grpc.BidiStreamingClient[SessionReq, SessionResp]

// S2AServiceServer is the server API for S2AService service.
// All implementations must embed UnimplementedS2AServiceServer
// for forward compatibility.
type S2AServiceServer interface {
	// S2A service accepts a stream of session setup requests and returns a stream
	// of session setup responses. The client of this service is expected to send
	// exactly one client_start or server_start message followed by at least one
	// next message. Applications running TLS clients can send requests with
	// resumption_ticket messages only after the session is successfully set up.
	//
	// Every time S2A client sends a request, this service sends a response.
	// However, clients do not have to wait for service response before sending
	// the next request.
	SetUpSession(grpc.BidiStreamingServer[SessionReq, SessionResp]) error
	mustEmbedUnimplementedS2AServiceServer()
}

// UnimplementedS2AServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedS2AServiceServer struct{}

func (UnimplementedS2AServiceServer) SetUpSession(grpc.BidiStreamingServer[SessionReq, SessionResp]) error {
	return status.Errorf(codes.Unimplemented, "method SetUpSession not implemented")
}
func (UnimplementedS2AServiceServer) mustEmbedUnimplementedS2AServiceServer() {}
func (UnimplementedS2AServiceServer) testEmbeddedByValue()                    {}

// UnsafeS2AServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to S2AServiceServer will
// result in compilation errors.
type UnsafeS2AServiceServer interface {
	mustEmbedUnimplementedS2AServiceServer()
}

func RegisterS2AServiceServer(s grpc.ServiceRegistrar, srv S2AServiceServer) {
	// If the following call pancis, it indicates UnimplementedS2AServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&S2AService_ServiceDesc, srv)
}

func _S2AService_SetUpSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(S2AServiceServer).SetUpSession(&grpc.GenericServerStream[SessionReq, SessionResp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type S2AService_SetUpSessionServer = grpc.BidiStreamingServer[SessionReq, SessionResp]

// S2AService_ServiceDesc is the grpc.ServiceDesc for S2AService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var S2AService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "s2a.proto.S2AService",
	HandlerType: (*S2AServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SetUpSession",
			Handler:       _S2AService_SetUpSession_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/proto/s2a/s2a.proto",
}
